import fs from 'fs-extra';
import path from 'path';

export const createProjectStructure = async (projectPath, structure, files = {}) => {
  try {
    // Create directories
    for (const dir of structure) {
      const fullPath = path.join(projectPath, dir);
      await fs.ensureDir(fullPath);
    }

    // Create files
    for (const [filePath, content] of Object.entries(files)) {
      const fullPath = path.join(projectPath, filePath);
      await fs.ensureDir(path.dirname(fullPath));
      await fs.writeFile(fullPath, content, 'utf8');
    }

    return true;
  } catch (error) {
    throw new Error(`Failed to create project structure: ${error.message}`);
  }
};

export const createGitIgnore = async (projectPath, language) => {
  const gitIgnoreContent = getGitIgnoreContent(language);
  const gitIgnorePath = path.join(projectPath, '.gitignore');
  await fs.writeFile(gitIgnorePath, gitIgnoreContent, 'utf8');
};

const getGitIgnoreContent = (language) => {
  const commonIgnores = `# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
`;

  const languageSpecificIgnores = {
    'Node.js': `# Dependencies
node_modules/
/.pnp
.pnp.js

# Testing
/coverage

# Production
/build
/dist

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port
`,

    'Python': `# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# pyenv
.python-version

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json
`,

    'Java': `# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# Virtual machine crash logs
hs_err_pid*
replay_pid*

# Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
.mvn/wrapper/maven-wrapper.jar

# Gradle
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

# IntelliJ IDEA
.idea/
*.iws
*.iml
*.ipr

# Eclipse
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

# NetBeans
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
`,

    'Rust': `# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which require the Microsoft Visual C++ Redistributable for Visual Studio 2015-2019
# to be installed for the program to run.
*.pdb
`,

    'C++': `# Prerequisites
*.d

# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Fortran module files
*.mod
*.smod

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app

# Debug files
*.dSYM/
*.su
*.idb
*.pdb

# Kernel Module Compile Results
*.mod*
*.cmd
.tmp_versions/
modules.order
Module.symvers
Mkfile.old
dkms.conf

# CMake
CMakeCache.txt
CMakeFiles/
CMakeScripts/
Testing/
Makefile
cmake_install.cmake
install_manifest.txt
compile_commands.json
CTestTestfile.cmake
_deps

# Conan
conandata.yml
conanfile.txt
conanfile.py
conaninfo.txt
conanbuildinfo.*
conan.lock

# vcpkg
vcpkg_installed/
`
  };

  return commonIgnores + (languageSpecificIgnores[language] || '');
};

export const createReadme = async (projectPath, projectName, language, structure) => {
  const readmeContent = `# ${projectName}

A ${language} project created with PackMate.

## Getting Started

### Prerequisites
- ${getPrerequisites(language)}

### Installation
\`\`\`bash
${getInstallationCommands(language)}
\`\`\`

### Running the Project
\`\`\`bash
${getRunCommands(language)}
\`\`\`

## Project Structure

${generateStructureTree(structure)}

## Development

This project was scaffolded with PackMate - a smart package manager for modern development.

## License

MIT
`;

  const readmePath = path.join(projectPath, 'README.md');
  await fs.writeFile(readmePath, readmeContent, 'utf8');
};

const getPrerequisites = (language) => {
  const prerequisites = {
    'Node.js': 'Node.js 16+ and npm/yarn/pnpm',
    'Python': 'Python 3.8+ and pip/poetry',
    'Java': 'Java 11+ and Maven/Gradle',
    'Rust': 'Rust 1.70+ and Cargo',
    'C++': 'C++17 compiler and CMake/Conan/vcpkg'
  };
  return prerequisites[language] || 'See project documentation';
};

const getInstallationCommands = (language) => {
  const commands = {
    'Node.js': 'npm install',
    'Python': 'pip install -r requirements.txt',
    'Java': 'mvn install',
    'Rust': 'cargo build',
    'C++': 'mkdir build && cd build && cmake .. && make'
  };
  return commands[language] || 'See project documentation';
};

const getRunCommands = (language) => {
  const commands = {
    'Node.js': 'npm start',
    'Python': 'python app.py',
    'Java': 'mvn spring-boot:run',
    'Rust': 'cargo run',
    'C++': './build/your-app'
  };
  return commands[language] || 'See project documentation';
};

const generateStructureTree = (structure) => {
  if (!structure || structure.length === 0) return 'No specific structure defined.';
  
  let tree = '```\n';
  tree += 'project/\n';
  
  structure.forEach(item => {
    const parts = item.split('/');
    let indent = '';
    for (let i = 0; i < parts.length - 1; i++) {
      indent += '├── ';
    }
    if (parts.length > 1) {
      indent = indent.slice(0, -4) + '├── ';
    }
    tree += `${indent}${parts[parts.length - 1]}/\n`;
  });
  
  tree += '```';
  return tree;
};
